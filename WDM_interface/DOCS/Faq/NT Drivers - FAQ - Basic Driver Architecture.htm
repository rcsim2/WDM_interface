<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0032)http://www.cmkrnl.com/faq04.html -->
<HTML><HEAD><TITLE>NT Drivers - FAQ - Basic Driver Architecture</TITLE>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type><!-------------------- BEGIN COPYING THE JAVASCRIPT SECTION HERE -------------------->
<SCRIPT language=JavaScript>
<!-- hide this script from non-javascript-enabled browsers
if (document.images) {
Iinternal_02_07 = new Image(68, 60);Iinternal_02_07.src = 'images/internal_title_01.gif';
Iinternal_02_07o = new Image(68, 60);Iinternal_02_07o.src = 'images/internal_title_01_over.gif';
Iinternal_03_02 = new Image(117, 25);Iinternal_03_02.src = 'images/internal_nav_up.gif';
Iinternal_03_02o = new Image(117, 25);Iinternal_03_02o.src = 'images/internal_nav_up_over.gif';
Iinternal_03_03 = new Image(116, 25);Iinternal_03_03.src = 'images/internal_nav_prev.gif';
Iinternal_03_03o = new Image(116, 25);Iinternal_03_03o.src = 'images/internal_nav_prev_over.gif';
Iinternal_03_04 = new Image(99, 25);Iinternal_03_04.src = 'images/internal_nav_next.gif';
Iinternal_03_04o = new Image(99, 25);Iinternal_03_04o.src = 'images/internal_nav_next_over.gif';
Iinternal_03_05 = new Image(100, 25);Iinternal_03_05.src = 'images/internal_nav_faq.gif';
Iinternal_03_05o = new Image(100, 25);Iinternal_03_05o.src = 'images/internal_nav_faq_over.gif';
Iinternal_03_06 = new Image(100, 25);Iinternal_03_06.src = 'images/internal_nav_map.gif';
Iinternal_03_06o = new Image(100, 25);Iinternal_03_06o.src = 'images/internal_nav_map_over.gif';
}
function di(id,name){
  if (document.images) {document.images[id].src=eval(name+".src"); }
}

// function that displays status bar message

function dm(msgStr) {
  document.returnValue = false;
  if (document.images) { 
     window.status = msgStr;
     document.returnValue = true;
  }
}
var showMsg = navigator.userAgent != "Mozilla/4.0 (compatible; MSIE 4.0; Mac_PowerPC)";
function dmim(msgStr) {
  document.returnValue = false;
  if (showMsg) { 
    window.status = msgStr;
    document.returnValue = true;
  }
}

// stop hiding -->
</SCRIPT>
<!------------------------- STOP COPYING THE JAVASCRIPT HERE ------------------------><LINK 
href="NT Drivers - FAQ - Basic Driver Architecture_bestanden/faqs.css" 
rel=STYLESHEET title="Style Faq" type=text/css>
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY aLink=#ffffcc bgColor=#333333 link=#990000 text=#333333 vLink=#666666>
<CENTER>
<TABLE border=0 cellPadding=0 cellSpacing=0 width=640>
  <TBODY>
  <TR align=left vAlign=top><!-- spacing row, 0 height. -->
    <TD><A name=top><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=18></A></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=117></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=116></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=99></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=100></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=100></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=68></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=22></TD></TR>
  <TR><!-- row 01 -->
    <TD bgColor=#ffffff rowSpan=3><IMG border=0 height=427 
      name=Ninternal_02_01 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_02_01.gif" 
      width=18></TD>
    <TD colSpan=5><IMG border=0 height=60 name=Ninternal_02_02 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_title_00.gif" 
      width=532></TD>
    <TD><A href="http://www.cmkrnl.com/index.html" 
      onmouseout="di('Ninternal_02_07','Iinternal_02_07');dm(''); return true;" 
      onmouseover="di('Ninternal_02_07','Iinternal_02_07o');dm('Return to Homepage'); return true;"><IMG 
      border=0 height=60 name=Ninternal_02_07 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_title_01.gif" 
      width=68></A></TD>
    <TD bgColor=#ffffff rowSpan=3><IMG border=0 height=427 
      name=Ninternal_02_08 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_02_08.gif" 
      width=22></TD>
    <TD><IMG border=0 height=60 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=1></TD></TR>
  <TR><!-- row 02 -->
    <TD><A href="http://www.cmkrnl.com/faq.html" 
      onmouseout="di('Ninternal_03_02','Iinternal_03_02');return false;" 
      onmouseover="di('Ninternal_03_02','Iinternal_03_02o');return false;"><IMG 
      border=0 height=25 name=Ninternal_03_02 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_nav_up.gif" 
      width=117></A></TD>
    <TD><A href="http://www.cmkrnl.com/faq03.html" 
      onmouseout="di('Ninternal_03_03','Iinternal_03_03');return false;" 
      onmouseover="di('Ninternal_03_03','Iinternal_03_03o');return false;"><IMG 
      border=0 height=25 name=Ninternal_03_03 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_nav_prev.gif" 
      width=116></A></TD>
    <TD><A href="http://www.cmkrnl.com/faq05.html" 
      onmouseout="di('Ninternal_03_04','Iinternal_03_04');return false;" 
      onmouseover="di('Ninternal_03_04','Iinternal_03_04o');return false;"><IMG 
      border=0 height=25 name=Ninternal_03_04 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_nav_next.gif" 
      width=99></A></TD>
    <TD><IMG border=0 height=25 name=Ninternal_03_05 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_nav_faq_over.gif" 
      width=100></TD>
    <TD><A href="http://www.cmkrnl.com/map.html" 
      onmouseout="di('Ninternal_03_06','Iinternal_03_06');return true;" 
      onmouseover="di('Ninternal_03_06','Iinternal_03_06o');dm('Site Map'); return true;"><IMG 
      border=0 height=25 name=Ninternal_03_06 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_nav_map.gif" 
      width=100></A></TD>
    <TD><IMG border=0 height=25 name=Ninternal_03_07 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_grayspace.gif" 
      width=68></TD>
    <TD><IMG border=0 height=25 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=1></TD></TR>
  <TR><!-- row 03 -->
    <TD align=left bgColor=#ffffff colSpan=6 vAlign=top>
      <DIV class=body><BR>
      <H1>4 Basic Kernel Driver Architecture</H1>
      <H2><A name=4.1>4.1</A> Okay, I need to write a kernel mode driver. Tell 
      me how.</H2>
      <P class=first>Too large a question for an FAQ, sorry. </P>
      <H2><A name=4.2>4.2</A> What is the basic structure of a kernel mode 
      driver?</H2>
      <P class=first>Every kernel mode driver must have a DriverEntry routine, 
      and for all practical purposes, at least one Dispatch routine is required 
      also. The DriverEntry routine must be called "DriverEntry", other routines 
      can have any name you like. Drivers should also have an Unload routine, 
      which permits the driver to be (guess what) unloaded, or removed from the 
      system. </P>
      <H2><A name=4.3>4.3</A> The NT driver doc talks about all these different 
      types of drivers. How do they all relate to one another?</H2>
      <H2><A name=4.3.1>4.3.1</A> Basic driver structure</H2>
      <P class=first>Let's define a "canonical" driver first. This will be a 
      monolithic (non-layered) driver for a single-device controller that can 
      handle only one I/O request at a time. In such a driver, I/O requests, 
      which are described by data structures known as I/O Request Packets 
      (IRPs), are handled by Dispatch, StartIo, InterruptService, and DpcForIsr 
      routines, in that order. Unless the device is very well-behaved and can 
      never interrupt unexpectedly, a SynchCritSection routine is also needed. 
      If the device controller can be programmed for more than one I/O request 
      at a time, the StartIo routine is usually replaced by one or more 
      IrpQueueing routines. </P>
      <P>Any driver that holds I/O requests (ie that does not complete them 
      right away or pass them on to other drivers) should have a Cancel routine. 
      This includes any driver with a StartIo routine or an IrpQueueing routine. 
      </P>
      <P>Drivers that use controller objects and/or adapter objects will usually 
      have ControllerControl and/or AdapterControl routines, respectively. </P>
      <H3><A name=4.3.2>4.3.2</A> What about layered drivers?</H3>
      <P class=first>NT allows drivers to be layered on top of one another. You 
      can start with a monolithic (self-contained) driver and put an upper-layer 
      driver above it. I/O requests to the device(s) controlled by the 
      lower-layer driver now come to the upper-layer driver first. </P>
      <P>You can layer on top of any existing driver, but you cannot install a 
      layer under a lowest-layer driver. The lowest-layer driver is the one that 
      actually talks to the I/O hardware, and NT offers no mechanism for 
      "hooking" or intercepting those operations and doing something else 
      instead. Other driver layers are generically called "highest-layer" (the 
      first driver that handles a particular IRP), "upper-layer" (any layer 
      except the lowest), and "lower-layer" (any layer except the highest). </P>
      <P>In terms of routines, an upper-layer driver puts its own Dispatch 
      routine(s) "ahead of" another driver's Dispatch routine(s). Hence, of all 
      the routines in a driver that handle I/O, upper-layer drivers may often 
      have only Dispatch routines. (They still have DriverEntry and Unload 
      routines.) They may also have IoCompletion routines, which are invoked 
      when the lower-layer driver completes an IRP that has come through the 
      upper-layer driver. </P>
      <P>If an upper-layer driver does its own IRP queueing, it adds either 
      StartIo or IrpQueueing routines, plus one or more Cancel routines. In that 
      case, the flow of an I/O request is: Upper-layer driver, Dispatch and 
      (StartIo or IrpQueueing), then lower-layer driver's Dispatch and 
      subsequent routines. </P>
      <P>Upper-layer drivers do not handle interrupts, so they do not generally 
      need an InterruptService routine, nor a DpcForIsr routine. They may have 
      TimerDpc routines. </P>
      <P>A good "starter" example for an upper-layer driver is the DISKPERF 
      driver. This driver collects disk I/O performance statistics and makes 
      them available to Performance Monitor and related tools. </P>
      <P>NT driver layering is not at all like the Unix Streams environment. The 
      NT driver layering mechanism is not completely generalized, and probably 
      works best in environments where drivers at all layers are written by the 
      same team, or at least by people who can speak with each other easily. It 
      is not really possible or advisable to layer a driver on top of an 
      existing driver unless you know quite a bit about how the driver you're on 
      top of does things. For example, drivers that use buffered I/O are usually 
      incompatible with the associated IRP mechanism. How do you know if your 
      soon-to-be-lower-layer driver uses buffered I/O? You just have to attach 
      to its device object and look. For that matter, the associated IRP 
      mechanism is incompatible with itself; only one driver in a stack of 
      layered drivers can safely IoMakeAssociatedIrp. </P>
      <H3><A name=4.3.3>4.3.3</A> What about file system drivers?</H3>
      <P class=first>A file system driver is generally a highest-layer driver 
      sitting atop the driver for random-access mass storage devices. It 
      implements the semantics of file-system-oriented I/O requests, such as 
      requests to create, open, extend, and delete files and directories. 
      Different file system drivers exist for different on-disk structures, such 
      as FAT, NTFS, and the CD-ROM file system. </P>
      <P>File system drivers are presently difficult to write, conceptually 
      because they have complex jobs to do and have intricate interactions with 
      the cache and the memory manager, and practically because Microsoft has 
      not put much information about them in the DDK documentation, and some 
      necessary header files and libraries are missing from the DDK. Microsoft 
      offers a separate Installable File System Kit that installs "on top of" 
      the DDK and provides source for some example file system drivers. Open 
      Systems Resources (see the <A 
      href="http://www.cmkrnl.com/resources00.html" #links>Products</A> links 
      page) has a File System Developers Kit with more documentation, more 
      examples, and ongoing support. </P>
      <H3><A name=4.3.4>4.3.4</A> What are class and port drivers?</H3>
      <P class=first>Class and port drivers exist for I/O hardware in which a 
      number of substantially different types, or classes, of I/O devices are 
      accessed through a common I/O device controller. The class drivers 
      implement the semantics of the different types of devices, such as disks 
      vs. tapes, while the port driver deals with programming the controller's 
      I/O ports (hence "port driver") or registers. </P>
      <H3><A name=4.3.5>4.3.5</A> What about NIC miniport drivers?</H3>
      <P class=first>A NIC miniport driver is a lowest-layer driver which is 
      "wrapped" by support routines provided by the NDIS port driver. It 
      provides support for a specific network interface card (NIC). </P>
      <H3><A name=4.3.6>4.3.6</A> What about SCSI miniport drivers?</H3>
      <P class=first>An SCSI miniport driver is a lowest-layer driver which is 
      "wrapped" by support routines provided by the SCSI port driver. It 
      provides support for a specific SCSI controller. </P>
      <H3><A name=4.3.7>4.3.7</A> What is this port/miniport thing?</H3>
      <P class=first>Microsoft realized that all SCSI port drivers would have a 
      great deal of common code, because they would all have to interface with 
      the existing SCSI class drivers. </P>
      <P>Similarly, all NIC drivers would have a great deal of common code, 
      because they would all have to interface with the existing transport-layer 
      drivers. </P>
      <P>The SCSI port driver and NDIS port driver, respectively, attempt to 
      pull all of this common code into common modules within NT. </P>
      <P>The port drivers also abstract the NT I/O support routines. For 
      example, a NIC miniport driver does not call IoMapTransfer, but rather 
      NdisMSetupDmaTransfer. They do this to such an extent that other operating 
      systems, such as Windows 95, can supply a NDIS port driver and SCSI port 
      driver and hence allow the miniport drivers to be compatible with those 
      other systems. </P><BR>
      <HR>

      <P class=bottomnav><A href="http://www.cmkrnl.com/faq04.html#top">top of 
      page</A> | <A href="http://www.cmkrnl.com/faq.html">up</A> | <A 
      href="http://www.cmkrnl.com/faq03.html">previous</A> | <A 
      href="http://www.cmkrnl.com/faq05.html">next</A> | <A 
      href="http://www.cmkrnl.com/index.html">home</A> </P></DIV></TD>
    <TD><IMG border=0 height=342 
      src="NT Drivers - FAQ - Basic Driver Architecture_bestanden/internal_00.gif" 
      width=1></TD></TR></TBODY></TABLE></CENTER></BODY></HTML>
