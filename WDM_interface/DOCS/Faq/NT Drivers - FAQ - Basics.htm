<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0032)http://www.cmkrnl.com/faq01.html -->
<HTML><HEAD><TITLE>NT Drivers - FAQ - Basics</TITLE>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type><!-------------------- BEGIN COPYING THE JAVASCRIPT SECTION HERE -------------------->
<SCRIPT language=JavaScript>
<!-- hide this script from non-javascript-enabled browsers
if (document.images) {
Iinternal_02_07 = new Image(68, 60);Iinternal_02_07.src = 'images/internal_title_01.gif';
Iinternal_02_07o = new Image(68, 60);Iinternal_02_07o.src = 'images/internal_title_01_over.gif';
Iinternal_03_02 = new Image(117, 25);Iinternal_03_02.src = 'images/internal_nav_up.gif';
Iinternal_03_02o = new Image(117, 25);Iinternal_03_02o.src = 'images/internal_nav_up_over.gif';
Iinternal_03_03 = new Image(116, 25);Iinternal_03_03.src = 'images/internal_nav_prev.gif';
Iinternal_03_03o = new Image(116, 25);Iinternal_03_03o.src = 'images/internal_nav_prev_over.gif';
Iinternal_03_04 = new Image(99, 25);Iinternal_03_04.src = 'images/internal_nav_next.gif';
Iinternal_03_04o = new Image(99, 25);Iinternal_03_04o.src = 'images/internal_nav_next_over.gif';
Iinternal_03_05 = new Image(100, 25);Iinternal_03_05.src = 'images/internal_nav_faq.gif';
Iinternal_03_05o = new Image(100, 25);Iinternal_03_05o.src = 'images/internal_nav_faq_over.gif';
Iinternal_03_06 = new Image(100, 25);Iinternal_03_06.src = 'images/internal_nav_map.gif';
Iinternal_03_06o = new Image(100, 25);Iinternal_03_06o.src = 'images/internal_nav_map_over.gif';
}
function di(id,name){
  if (document.images) {document.images[id].src=eval(name+".src"); }
}

// function that displays status bar message

function dm(msgStr) {
  document.returnValue = false;
  if (document.images) { 
     window.status = msgStr;
     document.returnValue = true;
  }
}
var showMsg = navigator.userAgent != "Mozilla/4.0 (compatible; MSIE 4.0; Mac_PowerPC)";
function dmim(msgStr) {
  document.returnValue = false;
  if (showMsg) { 
    window.status = msgStr;
    document.returnValue = true;
  }
}

// stop hiding -->
</SCRIPT>
<!------------------------- STOP COPYING THE JAVASCRIPT HERE ------------------------><LINK 
href="NT Drivers - FAQ - Basics_bestanden/faqs.css" rel=STYLESHEET 
title="Style Faq" type=text/css>
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY aLink=#ffffcc bgColor=#333333 link=#990000 text=#333333 vLink=#666666>
<CENTER>
<TABLE border=0 cellPadding=0 cellSpacing=0 width=640>
  <TBODY>
  <TR align=left vAlign=top><!-- spacing row, 0 height. -->
    <TD><A name=top><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=18></A></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=117></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=116></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=99></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=100></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=100></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=68></TD>
    <TD><IMG border=0 height=1 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=22></TD></TR>
  <TR><!-- row 01 -->
    <TD bgColor=#ffffff rowSpan=3><IMG border=0 height=427 
      name=Ninternal_02_01 
      src="NT Drivers - FAQ - Basics_bestanden/internal_02_01.gif" width=18></TD>
    <TD colSpan=5><IMG border=0 height=60 name=Ninternal_02_02 
      src="NT Drivers - FAQ - Basics_bestanden/internal_title_00.gif" 
    width=532></TD>
    <TD><A href="http://www.cmkrnl.com/index.html" 
      onmouseout="di('Ninternal_02_07','Iinternal_02_07');dm(''); return true;" 
      onmouseover="di('Ninternal_02_07','Iinternal_02_07o');dm('Return to Homepage'); return true;"><IMG 
      border=0 height=60 name=Ninternal_02_07 
      src="NT Drivers - FAQ - Basics_bestanden/internal_title_01.gif" 
      width=68></A></TD>
    <TD bgColor=#ffffff rowSpan=3><IMG border=0 height=427 
      name=Ninternal_02_08 
      src="NT Drivers - FAQ - Basics_bestanden/internal_02_08.gif" width=22></TD>
    <TD><IMG border=0 height=60 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=1></TD></TR>
  <TR><!-- row 02 -->
    <TD><A href="http://www.cmkrnl.com/faq.html" 
      onmouseout="di('Ninternal_03_02','Iinternal_03_02');return false;" 
      onmouseover="di('Ninternal_03_02','Iinternal_03_02o');return false;"><IMG 
      border=0 height=25 name=Ninternal_03_02 
      src="NT Drivers - FAQ - Basics_bestanden/internal_nav_up.gif" 
      width=117></A></TD>
    <TD><A href="http://www.cmkrnl.com/faq00.html" 
      onmouseout="di('Ninternal_03_03','Iinternal_03_03');return false;" 
      onmouseover="di('Ninternal_03_03','Iinternal_03_03o');return false;"><IMG 
      border=0 height=25 name=Ninternal_03_03 
      src="NT Drivers - FAQ - Basics_bestanden/internal_nav_prev.gif" 
      width=116></A></TD>
    <TD><A href="http://www.cmkrnl.com/faq02.html" 
      onmouseout="di('Ninternal_03_04','Iinternal_03_04');return false;" 
      onmouseover="di('Ninternal_03_04','Iinternal_03_04o');return false;"><IMG 
      border=0 height=25 name=Ninternal_03_04 
      src="NT Drivers - FAQ - Basics_bestanden/internal_nav_next.gif" 
      width=99></A></TD>
    <TD><IMG border=0 height=25 name=Ninternal_03_05 
      src="NT Drivers - FAQ - Basics_bestanden/internal_nav_faq_over.gif" 
      width=100></TD>
    <TD><A href="http://www.cmkrnl.com/map.html" 
      onmouseout="di('Ninternal_03_06','Iinternal_03_06');return true;" 
      onmouseover="di('Ninternal_03_06','Iinternal_03_06o');dm('Site Map'); return true;"><IMG 
      border=0 height=25 name=Ninternal_03_06 
      src="NT Drivers - FAQ - Basics_bestanden/internal_nav_map.gif" 
      width=100></A></TD>
    <TD><IMG border=0 height=25 name=Ninternal_03_07 
      src="NT Drivers - FAQ - Basics_bestanden/internal_grayspace.gif" 
    width=68></TD>
    <TD><IMG border=0 height=25 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" width=1></TD></TR>
  <TR><!-- row 03 -->
    <TD align=left bgColor=#ffffff colSpan=6 vAlign=top>
      <DIV class=body><BR>
      <H1>1 Basic questions</H1>
      <H2><A name=1.1>1.1</A> Help, I need a driver for...</H2>
      <P class=first>Sorry, wrong FAQ, wrong newsgroup, and/or wrong web page. 
      This is about <I>writing</I> drivers. </P>
      <H2><A name=1.2>1.2</A> What is a "device driver"?</H2>
      <P class=first>In terms of computer software, a "driver" is a routine or 
      set of routines that implements the device-specific aspects of generic I/O 
      operations. For example, an application calls a system function that 
      directs the operating system to write the contents of a buffer in memory 
      to a particular device. (In Win32, this would be <CODE>WriteFile</CODE>.) 
      The operating system handles the device-independent aspects of the 
      operation but calls routines provided by the driver for the device in 
      question to implement the device-specific functions. By substituting other 
      drivers, other devices (at least, those with compatible functions) can be 
      substituted without changing the rest of the operating system or the 
      application. </P>
      <P>In primitive PC operating environments such as MS-DOS, drivers were 
      specific to individual applications. For example, part of the success of 
      <I>Word Perfect for DOS</I> was due to its support for a very wide variety 
      of printers. But none of <I>Word Perfect</I>'s printer drivers would work 
      with any other applications, so when you installed <I>Autocad</I>, for 
      example, you had to install <I>Autocad</I>'s printer driver for your 
      printers as well as <I>Word Perfect</I>'s. As far as the operating system 
      is concerned, these aren't really "drivers" at all; they're just parts of 
      the user application. It's just that the applications are structured to 
      separate their device-dependent from their device-independent code. </P>
      <P>Under the 16-bit <I>Microsoft Windows</I> environment, the display and 
      printer drivers became the province of the "operating environment". That 
      is, <I>Windows</I> supplied drivers for a variety of video cards and for a 
      variety of printers, which could be used by any <I>Windows</I> 
      application. Makers of video cards and printers not supported by the stock 
      drivers could and did provide their own <I>Windows</I> drivers, and these 
      too could be used by any application. Many other types of devices, 
      however, were still controlled by individual applications. </P>
      <P>Under Windows NT, kernel mode drivers handle <I>all</I> I/O devices; It 
      is not even possible for user-mode code to access I/O hardware without the 
      aid of a kernel mode driver. </P>
      <H2><A name=1.3>1.3</A> What are the various types of NT device 
      drivers?</H2>
      <P class=first>Virtual device drivers, GDI drivers, and kernel mode 
      drivers. </P>
      <H3>1.3.1 <A name=vddprev>Virtual</A> device drivers (VDDs)</H3>
      <P class=first>VDDs are Win32 DLLs with specific entry point and 
      installation requirements. They allow 16-bit applications (DOS and Win16 
      applications) to access certain I/O ports, be informed of certain device 
      interrupts, and so on, when running under Windows NT. By "certain", we 
      mean those without security ramifications: 16-bit applications running 
      under NT are allowed to access devices such as serial and parallel ports, 
      but not the disk controller. Note, however, that VDDs do not actually 
      access I/O hardware from user mode. They simply provide routines that the 
      NTVDM calls after trapping a 16-bit app's attempts to reference IO ports. 
      The actual I/O hardware access is done by an ordinary NT kernel mode 
      driver. <A href="http://www.cmkrnl.com/faqvdd.html">Here</A> is a bit more 
      on how these work.</P><A name=vddnext></A>
      <H3>1.3.2 GDI drivers</H3>
      <P class=first>GDI drivers, also known as Win32 Graphics Drivers and 
      Kernel Mode Graphics Drivers, run in kernel mode but are nonetheless very 
      different from the "kernel mode drivers" that are the main focus of this 
      FAQ. GDI drivers exist to implement the video controller-specific or 
      printer-specific aspects of GDI functions. They are built as DLLs and are 
      loaded into system address space where their routines are called by the 
      GDI routines in Win32K.Sys. </P>
      <P>The execution environment of a GDI drivers is radically different from 
      that of kernel mode drivers in several important ways. GDI drivers always 
      execute in the context of their caller's thread, and the functions they 
      implement are always regarded as compute-bound and synchronous. That is, 
      the GDI driver is invoked to perform a function, and does not return to 
      its caller until that function is complete. The functions implemented by 
      GDI drivers involve operations that are always executed synchronously, 
      with no wait-for-interrupt necessary for either notification of the 
      hardware's completion of the operation nor of its readiness for the next 
      operation. In fact, there is no mechanism by which the GDI APIs can 
      support asynchronous operations nor export such behavior to their 
      applications. </P>
      <H3>1.3.3 Kernel Mode Drivers (KMDs)</H3>
      <P class=first>Kernel mode drivers implement the device-specfic aspects of 
      I/O requests such as (in Win32 terms) CreateFile, CloseHandle (for file 
      objects), ReadFile, WriteFile, and DeviceIoControl. In general, kernel 
      mode drivers are the only drivers that can touch I/O hardware, although 
      GDI video drivers do have access to the video card. </P>
      <P>SCSI miniport and netcard (NDIS) drivers are special cases of kernel 
      mode drivers. So are SCSI class drivers, file system drivers, redirectors, 
      and transport-layer network components, although these do not touch I/O 
      hardware directly. </P>
      <P>Note that as of NT 4.0, GDI drivers also run in kernel mode, but they 
      have a substantially different architecture from the drivers we call 
      "kernel mode drivers." In particular, operations to GDI drivers are 
      normally synchronous; a GDI driver does not return to its caller until the 
      operation requested by the caller has been completed, and the operation is 
      performed in the context of the requesting thread, whereas just the 
      opposite is true of kernel mode drivers. </P>
      <P>By contrast, kernel mode drivers usually implement functions that 
      require waiting for an interrupt, waiting for a device to become 
      available, etc. During such "waiting" periods the kernel mode driver 
      simply returns to its caller, allowing the caller to perform other work in 
      parallel with the I/O operation. Alternately, the caller can simply wait 
      ("block") until the I/O is complete. </P>
      <P>This FAQ is mostly about kernel mode drivers. Other types of WNT 
      drivers may eventually be covered in other FAQs, though I know of none at 
      the moment. </P>
      <H3>1.3.4 What do you mean by "kernel mode"?</H3>
      <P class=first>"Kernel mode" refers to the more privileged memory access 
      mode of the processor, "user mode" being the less privileged. This is a 
      part of the processor's hardware state. On x86 processors, this "memory 
      access mode" is known as the IO privilege level (IOPL); NT's kernel and 
      user modes are IOPL 0 and IOPL 3, respectively. These are often 
      colloquially called "ring 0" and "ring 3." NT does not use ring 1 or ring 
      2. </P>
      <P>On the Alpha the two modes are actually called kernel and user. </P>
      <P>Time spent in kernel mode is what many of NT's displays, such as 
      Performance Monitor, report as "privileged" time. </P>
      <P>The term "kernel" is unfortunately and confusingly used in several 
      different ways within Windows NT. For example, NT's operating system code 
      is organized into several major components called the "executive," the 
      "kernel," and the "HAL;" kernel mode drivers and GDI drivers also provide 
      major aspects of the operating system's functionality. <I>All</I> of these 
      components run in kernel mode. </P>
      <P>Yet a third use of the term "kernel" is in the terms "kernel APIs" and 
      "kernel objects" in the Win32 APIs. Win32 defines several categories of 
      "objects" that it works on and corresponding categories of APIs that work 
      on those objects. "Kernel objects", and the "Win32 kernel APIs" that work 
      on them, are those implemented by kernel mode components <I>other than</I> 
      the GDI and and User routines in Win32K.Sys. </P>
      <H3>1.3.5 Does NT support Windows 9x-style VxD's?</H3>
      <P class=first>No. No, not even under WDM. On the other hand, Windows 98 
      supports a subset of the NT driver interfaces, with some extensions, known 
      collectively as the WDM driver model. </P>
      <H2><A name=1.4>1.4</A> So, how do I know if I need a kernel mode 
      driver?</H2>
      <P class=first>If you have an I/O device for which NT doesn't have a 
      driver, or for which the NT-supplied driver doesn't implement the 
      functions you need, you'll need to find or write a kernel mode driver for 
      your device. </P>
      <H3><A name=1.4.1>1.4.1</A> But do I <I>really</I> need a kernel mode 
      driver?</H3><!-- TBD - blockquotes here screw up netscape, find workaround -->
      <P class=first>This question usually appears something like this: </P>
      <P class=quote>Look, my little data collection app just wants to peek and 
      poke at the parallel port now and then. Are you sure that I can't do this 
      from my app, that I have to provide a driver and issue Win32 I/O calls 
      instead? </P>
      <P class=first>To be rigorous about it, yes. Under Windows NT, 
      applications run in user mode (ring 3 on Intel), and under WNT, code 
      executing in user mode is not allowed to issue <CODE>IN</CODE> or 
      <CODE>OUT</CODE> instructions, nor can it physical address space such as 
      adapter RAM. WNT requires that these functions be performed from kernel 
      mode to preserve system security and stability. </P>
      <H3><A name=1.4.2>1.4.2</A><A name=#totalio> </A>I thought heard about a 
      magazine article that showed a way around this.</H3>
      <P class=first>There was indeed an article in <I>Dr. Dobbs' Journal</I>, 
      May 1996, that showed how to allow Win32 applications under NT to directly 
      access I/O ports. It works only on Intel platforms and is not really a 
      counterexample to the claim that "you need a kernel mode driver", since it 
      takes code running in kernel mode---supplied by a kernel mode driver---to 
      do the magic. It does not allow you to service interrupts, initiate DMA, 
      or do anything else with the device other than read and write its I/O 
      ports. You can actually get that functionality with the 
      <CODE>GENPORT.C</CODE> example from the DDK, and it is 
      platform-independent. </P>
      <P>Nonetheless, I must say that the article describes a very nice bit of 
      NT kernel hacking. <A 
      href="http://www.cmkrnl.com/arc-totalio.html">Here</A> is a brief 
      description of <CODE>TOTALIO</CODE> and a much safer version, 
      <CODE>GIVEIO</CODE>, written by the author of said DDJ article. </P>
      <H3><A name=1.4.3>1.4.3</A> What about VDDs? Don't they allow I/O access 
      from user mode? How do they get away with it?</H3>
      <P class=first>They don't, really; they just help NT fool 16-bit apps into 
      thinking they are doing I/O access. (See <A 
      href="http://www.cmkrnl.com/faq01.html#1.3">above</A>.) </P>
      <H2><A name=1.5>1.5</A> Okay, so I need a driver. But can I get away 
      without <I>writing</I> a driver?</H2>
      <P class=first>Maybe. Depending on your requirements, there are commercial 
      products that may allow you to avoid writing a driver for your device. 
      (See the <A href="http://www.cmkrnl.com/links03.html">Related Products</A> 
      pages.) </P>
      <P>These products each provide a kernel mode driver that implements a 
      variety of <CODE>DeviceIoControl</CODE> functions for accessing random I/O 
      devices. The devices are configured through convenient GUI tools included 
      with the product. The <CODE>DeviceIoControl</CODE> functions are "wrapped" 
      by convenient APIs in a supplied DLL. There are also GUI tools for 
      experimenting with the device. </P>
      <P>In general the I/O throughput of a device handled with the aid of one 
      of these "general purpose, configurable" drivers will be lower than if it 
      was controlled by a driver written specifically for the device, and the 
      I/O calls the app needs to issue will be different from those implemented 
      by a "real" purpose-built driver. However, the performance and 
      functionality may be quite acceptable for many uses, and in any case these 
      products provide a great way to exercise your hardware before a complete 
      driver can be written. </P>
      <P>If you have more time than money, there are two example drivers 
      supplied with the DDK that allow you to access I/O port and physical 
      memory space: </P>
      <DL>
        <DT><CODE>\ddk\src\general\portio</CODE> 
        <DD>implements <CODE>DeviceIoControl</CODE> calls that issue simple 
        <CODE>IN</CODE> or <CODE>OUT</CODE> instructions to selected I/O ports. 
        You select the I/O ports through registry entries. 
        <DT><CODE>\ddk\src\general\mapmem</CODE> 
        <DD>implements <CODE>DeviceIoControl</CODE> calls that map any range of 
        physical memory (including adapter RAM space) into a process's user-mode 
        address space. </DD></DL>
      <P>Both of these drivers require some knowledge of NT kernel drivers to 
      compile, install, and use, and are probably not something you want to put 
      in the field as part of a production system. But they're fine for 
      experimenting, they serve as good simple illustrations of many essential 
      techniques for all drivers, and they can be useful starting points for 
      your own development. </P>
      <H2><A name=1.6>1.6</A> What about driver "wizards", class libraries, 
      etc.?</H2>
      <P class=first>These do exist (see the <A 
      href="http://www.cmkrnl.com/links03.html">Related Products</A> page) and 
      they have been in use for some time now with no significant problems 
      reported in public forums. </P>
      <P>I offer just one caution: Don't let the "wizard" or class library fool 
      you into thinking that you don't need to learn the underlying DDK 
      interfaces; after all, that's the level at which you'll be debugging, and 
      if you don't understand it, you won't be able to debug it. instead, use 
      them as aids to learning those interfaces. Several posters to the relevant 
      newsgroups have indicated that these packages were useful to them in 
      exactly that way. </P><BR>
      <HR>

      <P class=bottomnav><A href="http://www.cmkrnl.com/faq01.html#top">top of 
      page</A> | <A href="http://www.cmkrnl.com/faq.html">up</A> | <A 
      href="http://www.cmkrnl.com/faq00.html">previous</A> | <A 
      href="http://www.cmkrnl.com/faq02.html">next</A> | <A 
      href="http://www.cmkrnl.com/index.html">home</A> </P></DIV></TD>
    <TD><IMG border=0 height=342 
      src="NT Drivers - FAQ - Basics_bestanden/internal_00.gif" 
  width=1></TD></TR></TBODY></TABLE></CENTER></BODY></HTML>
